# -*- coding: utf-8 -*-
"""poly_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/127l0x4uC53cgTYO6EixAg3fndMJ9p0cX
"""
import matplotlib 
matplotlib.use('Agg')
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import pandas as pd
import os

# We should remove this at some point
import warnings
warnings.filterwarnings('ignore')

# Finds the coefficients for a polynomial model of a given degree
def create_polynomial_regression_model(X_train, Y_train, X_test, Y_test, degree, verbose=0):

  X_train = np.reshape(X_train, (-1,1))

  poly_features = PolynomialFeatures(degree=degree)
  X_train_poly = poly_features.fit_transform(X_train)

  poly_model = LinearRegression()
  poly_model.fit(X_train_poly, Y_train)
  coeff = poly_model.coef_

  y_train_predicted = poly_model.predict(X_train_poly)

  # Setup training & testing vectors
  X_test = np.reshape(X_test, (-1,1))

  # Get prediction, RMSE, and r^2 score values
  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))
  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))
  r2_train = r2_score(Y_train, y_train_predicted)
  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))
  r2_test = r2_score(Y_test, y_test_predict)
  
  if(verbose == 1):  
    
    print("y_test_predict: ", y_test_predict)
    # Get coefficients
    print("Coefficients: ")
    print(coeff)

    # evaluating the model on training dataset
    print("-------------------------------------------")
    print("Model performance for the training set:")
    print("RMSE of training set is {}".format(rmse_train))
    print("R2 score of training set is {}".format(r2_train))
    
    # evaluating the model on test dataset
    print("-------------------------------------------")
    print("Model performance for the test set:")
    print("RMSE of test set is {}".format(rmse_test))
    print("R2 score of test set is {}".format(r2_test))

  return y_test_predict, coeff, rmse_train, r2_train, rmse_test, r2_test

# Graph data according to the derived coefficients
def print_poly_graph(X_train, Y_train, coeff, degree):
  Y_expected = []
  for (idx,x) in enumerate(X_train):
    val = 0
    for (i,c) in enumerate(coeff):
      val += (x**i) * c 
    Y_expected.append(val)
  # plt.plot(X_train, Y_train, label='actual')
  # plt.plot(X_train, Y_expected, label='expected')
  # plt.title("Degree="+str(degree))

# Graph RMSE vs. degree for a given county to find optimal degree
def get_ideal_degree_per_county(X_train, Y_train, X_test, Y_test, degrees, verbose=0):
  rmse_values = []
  y_test_predict_values = []
  for degree in degrees:
    y_test_predict, coeff, rmse_train, r2_train, rmse_test, r2_test = create_polynomial_regression_model(X_train, Y_train, X_test, Y_test, degree, verbose)
    rmse_values.append(rmse_test)
    y_test_predict_values.append(y_test_predict)
  # plt.plot(degrees, rmse_values)
  # plt.xlabel('Degree')
  # plt.ylabel('RMSE')
  return rmse_values, y_test_predict_values

# ----------------------------------------------- Main ----------------------------------------------- #

# Prepare .csv for writing data
day = '_may_26' # Only change this parameter!

# Prepare data for reading/writing
output_filename = 'c(x)' + day + '.csv'
open(output_filename, 'w+').close() # Clear file before writing to it (and create if nonexistent)
with open(output_filename, 'w') as f:
  f.write('0') # Add a value
f.close()
output_data = pd.read_csv(output_filename, 'w')

# Read COVID-data
input_data = pd.read_csv('covid_confirmed_usafacts_shortened.csv')
train_labels = pd.read_csv('labels' + day + '.csv')
min_rmse_list = []
degrees = range(2,20,1)
for (i,row) in enumerate(range(0, len(input_data))):
  # Get data. Note: X_train and X_test remain constant since they just measure time (in days)
  X_train = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]
  Y_train = input_data.loc[row][2:]
  X_test = [102]
  Y_test = [train_labels.loc[row][0]]

  rmse_values, y_test_predict = get_ideal_degree_per_county(X_train, Y_train, X_test, Y_test, degrees, verbose=0)

  # Get prediction associated with smallest RMSE 
  min_degree_idx = np.argmin(rmse_values)
  min_rmse_list.append(rmse_values[min_degree_idx])
  best_y_prediction = y_test_predict[min_degree_idx]
  output_data.loc[row] = [int(round(best_y_prediction[0]))]
  print("min_degree: ", min_degree_idx)
  print("expected_y_prediction: ", Y_test[0])
  print("best_y_prediction: ", int(round(best_y_prediction[0])))
  print('\n')

# Get average RMSE value over all RMSE values used
avg_rmse_per_day = sum(min_rmse_list)/len(min_rmse_list)
print("Average RMSE for "+day+": ", avg_rmse_per_day)

# Write predictions to a file
output_data.to_csv(output_filename)
print("Finished writing data!")

